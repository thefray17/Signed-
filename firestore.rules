rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() { return request.auth != null; }
    function isRoot() { return signedIn() && request.auth.token.isRoot == true; }
    function isAdmin() { return signedIn() && request.auth.token.role == 'admin'; }
    function isCoadmin() { return signedIn() && request.auth.token.role == 'coadmin'; }
    function isElevated() { return isRoot() || isAdmin() || isCoadmin(); }

    match /users/{uid} {
      // Everyone can read themselves; elevated roles can read all
      allow read: if signedIn() && (request.auth.uid == uid || isElevated());

      // A user can create their own doc (e.g., client-side bootstrapping)
      allow create: if signedIn() && request.auth.uid == uid;

      // A user can update their own doc BUT cannot change 'role' or 'status'
      allow update: if signedIn()
                    && request.auth.uid == uid
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.status == resource.data.status;

      // Elevated roles can update (e.g., set roles/status)
      allow update: if isElevated();

      // No deletes by default (adjust if you need)
      allow delete: if false;
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
